void floyd(int[][] matrix) {
    int[][] path = new int[matrix.length][matrix.length];
    int MaxValue=MAXNUM;
    for (int i = 0; i < matrix.length; i++) {
        for (int j = 0; j < matrix.length; j++) {
            path[i][j] = -1;
        }
    }
    for (int m = 0; m < matrix.length; m++) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[i][m] + matrix[m][j] < matrix[i][j]) {
                    matrix[i][j] = matrix[i][m] + matrix[m][j];
                    //记录经由哪个点到达
                    path[i][j] = m;
                }
            }
        }
    }
    for (int i = 0; i < matrix.length; i++) {
        for (int j = 0; j < matrix.length; j++) {
            if (i != j) {
                if (matrix[i][j] != MaxValue) {
                    pt.addFrame(vers.get(i));
                    findPath(i, j,path);
                    pt.addFrame(vers.get(j));
                }
            }
        }
        pt.addFrame(2);
    }
}
void findPath(int i, int j,int[][] path) {
    int m = path[i][j];
    if (m == -1) {
        pt.addFrame(findEdge(i,j));
        return;
    }
    findPath(i, m,path);
    findPath(m, j,path);
}