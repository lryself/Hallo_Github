void Prim(){
    int min = MAXNUM;	//定义min变量保存每一个lowcost数组中的最小值，默认为无效权值
    int minId = 0;//定义minId变量保存最小权值的顶点编号
    int sum = 0;//定义sum变量记录总权值
    int vertexSize = vers.size();//顶点个数
    int lowcost[]  = new int[vertexSize];//定义最小代价矩阵
    int adjvex[] = new int[vertexSize];//定义数组保存最小权值的顶点编号
    //lowcost矩阵初始化
    for(int i=0;i<vertexSize;i++) {
        lowcost[i] = matrix[0][i];
    }

    for(int i=1;i<vertexSize;i++) {
        min = Integer.MAX_VALUE;
        minId = 0;
        for(int j=1;j<vertexSize;j++) {
            if(lowcost[j]!=0&&lowcost[j]<min) {//找到lowcost中的最小有效权值
                min = lowcost[j];//记录最小值
                minId = j;//记录最小权值的顶点编号
            }
        }
        pt.addFrame(vers.get(adjvex[minId]));
        lowcost[minId] = 0;
        sum += min;
        pt.addFrame(findEdgeWeight(adjvex[minId],min));
        for(int j=1;j<vertexSize;j++) {
            if(lowcost[j]!=0&&matrix[minId][j]<lowcost[j]) {//在邻接矩阵中以编号为minId的顶点作为下一个顶点对lowcost中进行最小值替换
                lowcost[j] = matrix[minId][j];
                adjvex[j] = minId;
            }
        }
    }
}