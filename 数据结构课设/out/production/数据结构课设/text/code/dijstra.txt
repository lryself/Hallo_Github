void dijstra(int[][] matrix, int source) {
    //最短路径长度
    int MaxValue=MAXNUM;
    int[] shortest = new int[matrix.length];
    //判断该点的最短路径是否求出
    int[] visited = new int[matrix.length];
    //存储输出路径
    String[] path = new String[matrix.length];
    //初始化输出路径
    for (int i = 0; i < matrix.length; i++) {
        path[i] = new String(source + "->" + i);
    }
    //初始化源节点
    shortest[source] = 0;
    visited[source] = 1;
    pt.addFrame(vers.get(source));
    for (int i = 1; i < matrix.length; i++) {
        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int j = 0; j < matrix.length; j++) {
            //已经求出最短路径的节点不需要再加入计算并判断加入节点后是否存在更短路径
            if (visited[j] == 0 && matrix[source][j] < min) {
                min = matrix[source][j];
                index = j;
            }
        }
        //更新最短路径
        shortest[index] = min;
        visited[index] = 1;
        pt.addFrame(vers.get(index),false);
        for(int w=0;w<vers.size();w++)
        {
            for(int j=0;j+3<path[w].length();j+=3)
            {
                if(w==index)
                {
                    pt.addFrame(findEdge(Integer.parseInt(path[w].charAt(j)+""),Integer.parseInt(path[w].charAt(j+3)+"")));
                }
            }
        }
        //更新从index跳到其它节点的较短路径
        for (int m = 0; m < matrix.length; m++) {
            if (visited[m] == 0 && matrix[source][index] + matrix[index][m] < matrix[source][m]) {
                matrix[source][m] = matrix[source][index] + matrix[index][m];
                path[m] = path[index] + "->" + m;
            }
        }
    }
}